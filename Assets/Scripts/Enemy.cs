using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.AI;

[RequireComponent(typeof(NavMeshAgent))]
public class Enemy : LivingEntity
{
    NavMeshAgent pathfinder;
    Transform target;

    protected override void Start()
    {
        base.Start(); // 继承并保留了父类的Start()中执行的所有代码，否则完全覆盖掉父类的Start方法
        pathfinder = GetComponent<NavMeshAgent>();
        target = GameObject.FindGameObjectWithTag("Player").transform;

        StartCoroutine(UpdatePath());
    }

    void Update()
    {
        // 使用协程IEnumerator，让敌人每隔0.25秒而不是一帧就去计算新路径，这在多个敌人、多种路径情况下有很大负担
        //pathfinder.SetDestination(target.position);
    }

    IEnumerator UpdatePath()
    {
        float refreshRate = .25f;

        while (target != null)
        {
            Vector3 targetPosition = new Vector3(target.position.x, 0, target.position.z);
            if (!dead) // 作者的原意：如果对象在销毁后仍会运行一次寻找路径，所以要加个判断
            {
                pathfinder.SetDestination(targetPosition);
            }
            yield return new WaitForSeconds(refreshRate);
        }
    }
}
